openapi: 3.0.3
info:
  title: API Inventario
  version: 1.0.0
  description: >
    Microservicio encargado de la gestión de productos, tiendas y reservas de stock para procesos de compra. <br>
    Incluye funcionalidades de creación, actualización, eliminación y consulta de productos, así como la reserva de stock durante el checkout y el manejo de tiendas asociadas a vendedores. <br><br>
    Para autenticación, se usa un token JWT en el header:
    `Authorization: Bearer {token}`
tags:
  - name: Productos
    description: Gestión de productos y stock
  - name: Reservas
    description: Gestión de reservas de stock durante el checkout
  - name: Tiendas
    description: Gestión de tiendas
security:
  - bearerAuth: []

paths:
  /productos:
    post:
      tags:
        - Productos
      summary: Añadir producto y setear stock
      description: >
        Crea un nuevo producto en el sistema de inventario con un `sku` único.
        <br><br>
        El campo `disponible` indica si el producto está visible para el cliente final, pero su disponibilidad también depende de que el `stock` sea mayor a cero.
        <br><br>
        Requiere autenticación con JWT.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoPut'
      responses:
        '201':
          description: Producto añadido con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductoGet'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: INVALID_STOCK
                message: Stock debe ser un número entero mayor o igual a cero
        '401':
          description: Acceso denegado
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: Sesión no iniciada
        '500':
          $ref: '#/components/responses/ErrorServidor'
        
    get:
      tags:
        - Productos
      summary: Entrega lista de todos los productos
      description: >
        Devuelve un arreglo con todos los productos registrados en el inventario.
        <br><br>
        Si no hay productos disponibles, retorna un error `404 INVENTARIO_VACIO`.
        <br><br>
        Requiere autenticación con JWT.
      responses:
        '200':
          description: Lista de productos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayProductosGet'
        '401':
          description: Acceso denegado
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: Sesión no iniciada
        '404':
          description: No encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: INVENTARIO_VACIO
                message: No existen productos registrados
        '500':
          $ref: '#/components/responses/ErrorServidor'


  /productos/{sku}:
    get:
      tags:
        - Productos
      summary: Consultar datos de un producto
      description: > 
        Obtiene los detalles de un producto específico a partir de su `sku`.
        <br><br>
        Si el producto no existe, se retorna un error
        `404 PRODUCTO_NO_ENCONTRADO`.
      security: []
      parameters:
        - $ref: '#/components/parameters/skuParam'
      responses:
        '200':
          description: Stock encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductoGet'
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: PRODUCTO_NO_ENCONTRADO
                message: El producto con SKU 123 no fue encontrado
        '500':
          $ref: '#/components/responses/ErrorServidor'

    patch:
      tags:
        - Productos
      summary: Actualizar datos del producto
      description: >
        Permite actualizar uno o más atributos de un producto específico, identificado por su `sku`. <br><br>
        Solo se actualizan los campos enviados. Si el cuerpo está vacío, se retorna un error `400 CUERPO_VACIO`. <br>
        La disponibilidad de un producto depende tanto del campo `disponible` como del `stock > 0`. <br><br>
        Requiere autenticación JWT y permisos del vendedor correspondiente..
      parameters:
        - $ref: '#/components/parameters/skuParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoPatch'
      responses:
        '204':
          description: Stock actualizado con exito
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: DATOS_ERRONEOS
                message: El stock debe ser mayor o igual a cero
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: No tienes permisos para editar este producto
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: PRODUCTO_NO_ENCONTRADO
                message: El producto con SKU 123 no fue encontrado
        '500':
          $ref: '#/components/responses/ErrorServidor'

    delete:
      tags:
        - Productos
      summary: Eliminar un producto.
      description: > 
        Elimina un producto del inventario según su `sku`.
        <br><br> 
        Antes de proceder, el sistema valida que el producto no esté asociado a ninguna orden activa.
        <br>
        Si hay órdenes en curso, se devuelve un error `409 PRODUCTO_EN_ORDEN_ACTIVA`.
        <br><br> 
        Requiere autenticación JWT y permisos del vendedor correspondiente..
      parameters:
        - $ref: '#/components/parameters/skuParam'
      responses:
        '204':
          description: Producto eliminado con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductoGet'
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: No tienes permisos para eliminar este producto
        '404':
          description: Producto no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: PRODUCTO_NO_ENCONTRADO
                message: El producto con SKU 123 no fue encontrado
        '409':
          description: Conflicto. El producto está en una orden activa y no puede ser eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: PRODUCTO_EN_ORDEN_ACTIVA
                message: El producto con SKU 123 está en una orden
        '500':
          $ref: '#/components/responses/ErrorServidor'
            

  /reservas:
    post:
      tags:
        - Reservas
      summary: Reservar stock para una orden (inicio de checkout)
      description: >
        Realiza una reserva temporal de stock para una orden, vinculada al `sku` del producto. <br><br>
        Esta operación se ejecuta durante el inicio del proceso de compra (checkout). Si no hay stock suficiente,
        se retorna un error `409 STOCK_INSUFICIENTE`. <br><br>
        Las reservas no confirmadas se consideran expiradas tras cierto tiempo, y pueden ser canceladas automáticamente.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservaRequest'
      responses:
        '201':
          description: Reserva creada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservaResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: DATOS_ERRONEOS
                message: La cantidad debe ser mayor a cero
        '409':
          description: Stock insuficiente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: STOCK_INSUFICIENTE
                message: No hay stock suficiente de este producto
        '500':
          $ref: '#/components/responses/ErrorServidor'

  /reservas/{id_orden}/confirmar:
    patch:
      tags:
        - Reservas
      summary: Confirmar reserva de stock tras pago exitoso
      description: >
        Confirma una reserva previamente realizada para una orden (`id_orden`). <br><br>
        Al confirmarse, el stock reservado se descuenta de forma definitiva. <br>
        Si la reserva no existe o ya expiró, se retorna un error `404 RESERVA_NO_ENCONTRADA`.
      security: []
      parameters:
        - $ref: '#/components/parameters/idOrden'
      responses:
        '201':
          description: Reserva confirmada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservaResponse'
        '404':
          description: Orden no encontrada o reserva expirada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: RESERVA_NO_ENCONTRADA
                message: La reserva con ID 123 no fue encontrada
        '500':
          $ref: '#/components/responses/ErrorServidor'

  /reservas/{id_orden}/cancelar:
    patch:
      tags:
        - Reservas
      summary: Cancelar reserva de stock (pago fallido o timeout)
      description: >
        Cancela una reserva de stock asociada a una orden (`id_orden`). <br><br>
        Esta operación puede ser invocada cuando el pago falla o cuando la reserva expira.
        <br>
        Al cancelarse, el stock reservado se reintegra al inventario del producto.
        <br><br>
        Si la reserva no existe o ya fue procesada, se retorna un error `404 RESERVA_NO_ENCONTRADA`.
      security: []
      parameters:
      - $ref: '#/components/parameters/idOrden'
      responses:
        '201':
          description: Reserva cancelada, stock devuelto
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservaResponse'
        '404':
          description: Orden no encontrada o reserva expirada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: RESERVA_NO_ENCONTRADA
                message: La reserva con ID 123 no fue encontrada
        '500':
          $ref: '#/components/responses/ErrorServidor'

  /tiendas:
    post:
      tags:
        - Tiendas
      summary: Crear una tienda con un vendedor asociado
      description: >
        Crea una nueva tienda y la asocia al vendedor autenticado. <br><br>
        Cada tienda contiene información como nombre, dirección y teléfono. <br>
        Si no se cuenta con los permisos adecuados, se retorna un error `401 NO_AUTORIZADO`. <br><br>
        Requiere autenticación JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TiendaPost'
      responses:
        '201':
          description: Tienda creada con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TiendaGet'
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: No tienes permisos para crear una tienda
        '500':
          $ref: '#/components/responses/ErrorServidor'

  /tiendas/{id_tienda}:
    get:
      tags:
        - Tiendas
      summary: Obtener datos de una tienda
      description: >
        Retorna los detalles de una tienda específica a partir de su `id_tienda`. <br><br>
        Si no se encuentra la tienda, se retorna un error `404 TIENDA_NO_ENCONTRADA`.
      security: []
      parameters:
        - $ref: '#/components/parameters/id_tiendaParam'
      responses:
        '200':
          description: Tienda encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TiendaGet'
        '404':
          description: Tienda no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: TIENDA_NO_ENCONTRADA
                message: La tienda con ID 123 no fue encontrada
        '500':
          $ref: '#/components/responses/ErrorServidor'

    patch:
      tags:
        - Tiendas
      summary: Actualizar datos de una tienda
      description: >
        Permite modificar los datos de una tienda específica (`id_tienda`).
        <br><br>
        Se puede actualizar el nombre, la dirección y el teléfono. Al menos un campo debe ser enviado.
        <br>
        Si el cuerpo de la petición está vacío, se retorna un error `400 CUERPO_VACIO`.
        <br><br>
        Requiere autenticación JWT y permisos del vendedor dueño de la tienda.
      parameters:
        - $ref: '#/components/parameters/id_tiendaParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TiendaPatch'
      responses:
        '200':
          description: Tienda actualizada con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TiendaGet'
        '400':
          description: Petición inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: CUERPO_VACIO
                message: Debe haber al menos un campo
        '401':
          description: Acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: NO_AUTORIZADO
                message: No tienes permisos para editar esta tienda
        '404':
          description: Tienda no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: TIENDA_NO_ENCONTRADA
                message: Tienda con ID 123 no fue encontrada
        '500':
          $ref: '#/components/responses/ErrorServidor'

components:
  schemas:
    ProductoGet:
      type: object
      properties:
        sku:
          type: string
          format: uuid
        tienda_id:
          type: string
        stock:
          type: integer
        precio:
          type: integer
        disponible:
          type: boolean
          description: > 
            Flag manual que permite al vendedor pausar o publicar un producto.
            Este campo no depende del stock. <br>
            Para que un producto esté disponible para compra, deben cumplirse ambas condiciones: <br>
            - disponible = true <br>
            - stock > 0
      required:
        - sku
        - tienda_id
        - stock
        - precio
        - disponible
      example:
        sku: "123"
        tienda_id: "5678"
        stock: 234
        precio: 12000
        disponible: true
        
    ArrayProductosGet:
      type: array
      items:
        $ref: '#/components/schemas/ProductoGet'
      example:
        - sku: "123"
          tienda_id: "5678"
          stock: 234
          precio: 12000
          disponible: true
        - sku: "456"
          tienda_id: "5678"
          stock: 2
          precio: 100
          disponible: false

    ProductoPut:
      type: object
      properties:
        stock:
          type: integer
        precio:
          type: integer
        disponible:
          type: boolean
          description: >
            Flag manual del vendedor para pausar o publicar el producto.  <br>
            Si no se especifica, se considera `true`.
      required:
        - stock
        - precio
      example:
        stock: 234
        precio: 12000
        disponible: true

    ProductoPatch:
      type: object
      minProperties: 1
      properties:
        stock:
          type: integer
        precio:
          type: integer
        disponible:
          type: boolean
          description: > 
            Flag manual que permite al vendedor pausar o publicar un producto. <br>
            Este campo no depende del stock. <br>
            Para que un producto esté disponible para compra, deben cumplirse ambas condiciones: <br>
            - disponible = true <br>
            - stock > 0
      example:
        stock: 123
        precio: 900000
        disponible: false
  
    ReservaRequest:
      type: object
      properties:
        id_orden:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              sku:
                type: string
              cantidad_reservada:
                type: integer
        expira_en:
          type: string
          format: date-time
      required:
        - id_orden
        - items
        - expira_en
      example:
        id_orden: "123QWE"
        items:
          - sku: "ABC123"
            cantidad_reservada: 2
          - sku: "XYZ456"
            cantidad_reservada: 1
        expira_en: "2025-09-10T12:00:00Z"
        
    ReservaResponse:
      type: object
      properties:
        success:
          type: boolean
        id_orden:
          type: string
          format: uuid
      example:
        success: true
        id_orden: '123'
      
      

    TiendaPost:
      type: object
      properties:
        nombre:
          type: string
        direccion:
          type: string
        telefono:
          type: integer
      required:
        - nombre
        - direccion
        - telefono
      example:
        nombre: "CompumundoHipermegaRed"
        direccion: "Avenida Siempre Viva 742"
        telefono: 912345678

    TiendaGet:
      type: object
      properties:
        id_tienda:
          type: string
        id_vendedor:
          type: string
        nombre:
          type: string
        direccion:
          type: string
        telefono:
          type: string
        fecha_creacion:
          type: string
          format: date
          description: "Fecha de creación de la tienda en formato YYYY-MM-DD."
      required:
        - id_tienda
        - id_vendedor
        - nombre
        - direccion
        - telefono
        - fecha_creacion
      example:
        id_tienda: "ac123"
        id_vendedor: "456"
        nombre: "CompumundoHipermegaRed"
        direccion: "Avenida Siempre Viva 742"
        telefono: "912345678"
        fecha_creacion: "2024-12-31"
        
    TiendaPatch:
      type: object
      properties:
        nombre:
          type: string
        direccion:
          type: string
        telefono:
          type: string
      minProperties: 1
      example:
        nombre: "CompumundoHipermegaRed"
        direccion: "Avenida Siempre Viva 742"
        telefono: "912345678"

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
      example:
        code: VALIDACION_STOCK
        message: El stock debe ser un número entero mayor o igual a cero

  responses:
    ErrorServidor:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: ERROR_INTERNO
            message: Ocurrió un error en el servidor

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  parameters:
    skuParam:
      name: sku
      in: path
      required: true
      description: Identificador único del producto
      schema:
        type: string
    
    idOrden:
      name: id_orden
      in: path
      required: true
      schema:
        type: string
      description: Identificador de la orden asociada a la reserva
      
    id_tiendaParam:
      name: id_tienda
      in: path
      required: true
      description: Identificador único de la tienda
      schema:
        type: string